{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","services/comment.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","services/user.ts","services/post.ts","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","setSelectedPost","setIsFormShown","handleSelectedPost","post","handleReset","_jsxs","children","_jsx","className","map","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","initialFormValues","name","email","initialErrors","NewCommentForm","setComments","setErrorMessage","formValues","setFormValues","useState","errors","setErrors","isSubmitting","setIsSubmitting","emailPattern","handleChange","event","console","log","prev","target","value","onSubmit","preventDefault","normilizedName","trim","normilizedEmail","normilizedComment","test","newComment","postId","comment","catch","finally","htmlFor","placeholder","classNames","onChange","PostDetails","isFormShown","comments","isLoading","setIsLoading","errorMessage","useEffect","concat","handleDeleteComment","commentId","currentComments","filter","deleteComment","_Fragment","href","handleWriteComment","UserSelector","users","selectedUser","setSelectedUser","isActive","setIsActive","handleSelectUser","user","role","App","setUsers","setPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b89dcea7.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (value: Post | null) => void;\n  setIsFormShown: (value: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsFormShown,\n}) => {\n  const handleSelectedPost = (post: Post) => () => {\n    setSelectedPost(post);\n    setIsFormShown(false);\n  };\n\n  const handleReset = () => {\n    setSelectedPost(null);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {post.id === selectedPost?.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={handleReset}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={handleSelectedPost(post)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { addComment } from '../services/comment';\n\ntype Props = {\n  selectedPost: Post;\n  setComments: (value: Comment[] | { (prev: Comment[]): Comment[] }) => void,\n  setErrorMessage: (value: string) => void;\n};\n\nconst initialFormValues = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nconst initialErrors = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setComments,\n  setErrorMessage,\n}) => {\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState(initialErrors);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    // eslint-disable-next-line no-console\n    console.log('Before state update:', formValues); // Вывод текущего состояния перед обновлением\n    // eslint-disable-next-line no-console\n    console.log('Before errors update:', errors);\n    setFormValues((prev) => ({\n      ...prev, [event.target.name]: event.target.value,\n    }));\n    setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\n    // eslint-disable-next-line no-console\n    console.log('After state update:', formValues); // Вывод состояния после обновления\n    // eslint-disable-next-line no-console\n    console.log('After errors update:', errors);\n  };\n\n  const handleReset = () => {\n    setErrors({ name: '', email: '', body: '' });\n    setFormValues({ name: '', email: '', body: '' });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const normilizedName = formValues.name.trim();\n    const normilizedEmail = formValues.email.trim();\n    const normilizedComment = formValues.body.trim();\n\n    if (!normilizedName) {\n      setErrors((prev) => ({ ...prev, name: 'Name is required' }));\n    }\n\n    if (!normilizedEmail) {\n      setErrors({\n        ...errors,\n        email: 'Email is required',\n      });\n    }\n\n    if (normilizedEmail && !emailPattern.test(normilizedEmail)) {\n      setErrors({\n        ...errors,\n        email: 'Email is invalid',\n      });\n    }\n\n    if (!normilizedComment) {\n      setErrors((prev) => ({ ...prev, body: 'Enter some text' }));\n    }\n\n    if (!normilizedName\n    || !emailPattern.test(normilizedEmail)\n    || !normilizedComment\n    ) {\n      return;\n    }\n\n    const newComment = {\n      id: 0,\n      postId: selectedPost.id,\n      name: formValues.name,\n      email: formValues.email,\n      body: formValues.body,\n    };\n\n    setIsSubmitting(true);\n\n    addComment(newComment)\n      .then(response => {\n        setComments((prev: Comment[]) => [...prev, response]);\n      })\n      .catch(() => setErrorMessage('Can not add a comment, try again later'))\n      .finally(() => {\n        setIsSubmitting(false);\n\n        setFormValues({\n          ...formValues,\n          body: '',\n        });\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={formValues.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.email}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': errors.email,\n            })}\n            value={formValues.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': errors.body,\n            })}\n            value={formValues.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.body}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function addComment(comment: Comment) {\n  return client.post<Comment>('/comments', comment);\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../services/comment';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  isFormShown: boolean;\n  setIsFormShown: (value: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isFormShown,\n  setIsFormShown,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setErrorMessage('');\n    setIsLoading(true);\n    getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setErrorMessage('Something went wrong'))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost]);\n\n  const handleWriteComment = () => {\n    setIsFormShown(true);\n  };\n\n  const handleDeleteComment = (commentId: number) => () => {\n    setComments(currentComments => {\n      return currentComments.filter(comment => comment.id !== commentId);\n    });\n    deleteComment(commentId)\n      .catch(() => {\n        setComments(comments);\n        setErrorMessage('Can not add a comment, try again later');\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {\n              selectedPost.body\n            }\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!comments.length && !isLoading) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments.length > 0 && !isLoading) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!isLoading && !isFormShown) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShown && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n            setErrorMessage={setErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (value: User) => void,\n  setSelectedPost: (value: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleSelectUser = (user: User) => () => {\n    setSelectedUser(user);\n    setIsActive(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>\n            {!selectedUser ? (\n              'Choose a user'\n            ) : (\n              selectedUser.name\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isActive && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                onClick={handleSelectUser(user)}\n              >\n                {user.name}\n              </a>\n\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './services/user';\nimport { User } from './types/User';\nimport { getPosts } from './services/post';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isFormShown, setIsFormShown] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    setErrorMessage('');\n    if (selectedUser) {\n      setIsLoading(true);\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(posts && !posts.length && !isLoading) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts && posts.length > 0 && !isLoading) && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setIsFormShown={setIsFormShown}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isFormShown={isFormShown}\n                  setIsFormShown={setIsFormShown}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}